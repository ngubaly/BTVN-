#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/uart.h"
#include "hardware/gpio.h"
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

// UART Configuration
#define UART_ID         uart0
#define BAUD_RATE       9600
#define UART_TX_PIN     0
#define UART_RX_PIN     1

// CPU Definitions
#define ROM_SIZE        128
#define RAM_SIZE        128

// Status Register Flags
#define STATUS_ZERO     0x01
#define STATUS_OF       0x02

// General-purpose Registers
typedef struct {
    uint8_t r0;
    uint8_t r1;
    uint8_t r2;
    uint8_t r3;
} GP_Registers;

// CPU State
typedef struct {
    uint8_t PC;                    // Program Counter
    GP_Registers regs;             // General-purpose registers
    uint8_t status;                // Status register (Zero and Overflow flags)
    uint8_t program_rom[ROM_SIZE]; // Program ROM
    uint8_t program_ram[RAM_SIZE]; // Program RAM
} CPU_State;

// Function Prototypes
void initialize_cpu(CPU_State *cpu);
void load_program_via_uart(CPU_State *cpu);
void fetch_instruction(CPU_State *cpu, uint8_t *opcode, uint8_t *operand1, uint8_t *operand2);
void decode_and_execute(CPU_State *cpu, uint8_t opcode, uint8_t operand1, uint8_t operand2, bool *end_flag);
void execute_instruction(CPU_State *cpu, uint8_t opcode, uint8_t operand1, uint8_t operand2, bool *end_flag);

// Instruction Execution Functions
void instr_mem_to_r0(CPU_State *cpu, uint8_t rx);
void instr_r0_to_mem(CPU_State *cpu, uint8_t rx);
void instr_transfer_reg(CPU_State *cpu, uint8_t rx, uint8_t ry);
void instr_immediate_set(CPU_State *cpu, uint8_t value);
void instr_add(CPU_State *cpu, uint8_t rx, uint8_t ry);
void instr_sub(CPU_State *cpu, uint8_t rx, uint8_t ry);
void instr_shift_left(CPU_State *cpu, uint8_t rx);
void instr_shift_right(CPU_State *cpu, uint8_t rx);
void instr_compare(CPU_State *cpu, uint8_t rx);
void instr_output(CPU_State *cpu, uint8_t rx);
void instr_input(CPU_State *cpu, uint8_t rx);
void instr_cond_branch(CPU_State *cpu, uint8_t rx, bool *end_flag);
void instr_uncond_branch(CPU_State *cpu, uint8_t rx, bool *end_flag);

// Utility Functions
uint8_t get_register_value(CPU_State *cpu, uint8_t reg);
void set_register_value(CPU_State *cpu, uint8_t reg, uint8_t value);
void update_zero_flag(CPU_State *cpu, uint8_t result);
void update_overflow_flag(CPU_State *cpu, int result);

// Main Function
int main() {
    // Initialize UART
    stdio_init_all();
    uart_init(UART_ID, BAUD_RATE);
    gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);

    // Initialize CPU
    CPU_State cpu;
    initialize_cpu(&cpu);

    // Load Program into ROM via UART
    load_program_via_uart(&cpu);

    // Execute the program
    bool end_flag = false;
    while (!end_flag) {
        uint8_t opcode, operand1, operand2;
        fetch_instruction(&cpu, &opcode, &operand1, &operand2);
        decode_and_execute(&cpu, opcode, operand1, operand2, &end_flag);
    }

    uart_puts(UART_ID, "Program execution completed.\n\r");
    return 0;
}

// Initialize CPU State
void initialize_cpu(CPU_State *cpu) {
    cpu->PC = 0;
    cpu->regs.r0 = 0;
    cpu->regs.r1 = 0;
    cpu->regs.r2 = 0;
    cpu->regs.r3 = 0;
    cpu->status = 0;
    memset(cpu->program_rom, 0, ROM_SIZE);
    memset(cpu->program_ram, 0, RAM_SIZE);
}

// Load Program into ROM via UART
void load_program_via_uart(CPU_State *cpu) {
    uart_puts(UART_ID, "Enter program in hexadecimal (128 bytes, each byte as two hex digits):\n\r");
    uint8_t byte = 0;
    int count = 0;
    char hex_input[3] = {0};
    while (count < ROM_SIZE) {
        if (uart_is_readable(UART_ID)) {
            char c = uart_getc(UART_ID);
            if (c == '\n' || c == '\r') {
                continue; // Ignore newlines
            }
            hex_input[count % 2] = c;
            if (count % 2 == 1) {
                // Convert two hex chars to a byte
                sscanf(hex_input, "%2hhx", &byte);
                cpu->program_rom[count / 2] = byte;
                count++;
                uart_putc(UART_ID, c); // Echo the character
                if (count % 2 == 0) {
                    uart_puts(UART_ID, " ");
                }
            } else {
                // First hex character of the byte
                hex_input[0] = c;
            }
        }
    }
    uart_puts(UART_ID, "\n\rProgram loaded into ROM.\n\r");
}

// Fetch Instruction from ROM
void fetch_instruction(CPU_State *cpu, uint8_t *opcode, uint8_t *operand1, uint8_t *operand2) {
    if (cpu->PC >= ROM_SIZE) {
        uart_puts(UART_ID, "Program Counter out of ROM bounds.\n\r");
        *opcode = 0xFF; // Undefined opcode to halt
        *operand1 = 0;
        *operand2 = 0;
        return;
    }
    *opcode = cpu->program_rom[cpu->PC];
    *operand1 = (cpu->PC + 1 < ROM_SIZE) ? cpu->program_rom[cpu->PC + 1] : 0;
    *operand2 = (cpu->PC + 2 < ROM_SIZE) ? cpu->program_rom[cpu->PC + 2] : 0;
}

// Decode and Execute Instruction
void decode_and_execute(CPU_State *cpu, uint8_t opcode, uint8_t operand1, uint8_t operand2, bool *end_flag) {
    execute_instruction(cpu, opcode, operand1, operand2, end_flag);
}

// Execute Instruction Based on Opcode
void execute_instruction(CPU_State *cpu, uint8_t opcode, uint8_t operand1, uint8_t operand2, bool *end_flag) {
    uint8_t upper_nibble = (opcode & 0xF0) >> 4;
    switch (upper_nibble) {
        case 0x0:
            // 0000 ddxx
            {
                uint8_t sub_op = opcode & 0x0F;
                uint8_t dd = (sub_op & 0xC) >> 2;
                uint8_t xx = sub_op & 0x3;
                if (dd == 0x0) {
                    // Transfer from Memory to r0
                    instr_mem_to_r0(cpu, xx);
                } else if (dd == 0x1) {
                    // Transfer from r0 to Memory
                    instr_r0_to_mem(cpu, xx);
                } else {
                    uart_puts(UART_ID, "Undefined opcode in 0000 ddxx.\n\r");
                    *end_flag = true;
                }
            }
            break;
        case 0x1:
            // 0001 xxyy: Transfer between registers (rx -> ry)
            {
                uint8_t xxyy = opcode & 0x0F;
                uint8_t rx = (xxyy & 0xC) >> 2;
                uint8_t ry = xxyy & 0x3;
                instr_transfer_reg(cpu, rx, ry);
            }
            break;
        case 0x2:
            // 0010 xxxx: Immediate Setting to r0
            {
                uint8_t value = opcode & 0x0F;
                instr_immediate_set(cpu, value);
            }
            break;
        case 0x3:
            // 0011 xxyy: Addition (rx + ry -> rx)
            {
                uint8_t xxyy = opcode & 0x0F;
                uint8_t rx = (xxyy & 0xC) >> 2;
                uint8_t ry = xxyy & 0x3;
                instr_add(cpu, rx, ry);
            }
            break;
        case 0x4:
            // 0100 xxyy: Subtraction (rx - ry -> rx)
            {
                uint8_t xxyy = opcode & 0x0F;
                uint8_t rx = (xxyy & 0xC) >> 2;
                uint8_t ry = xxyy & 0x3;
                instr_sub(cpu, rx, ry);
            }
            break;
        case 0x5:
            // 0101 ddxx: Shift Left or Right
            {
                uint8_t ddxx = opcode & 0x0F;
                uint8_t dd = (ddxx & 0xC) >> 2;
                uint8_t rx = ddxx & 0x3;
                if (dd == 0x0) {
                    // Shift Left
                    instr_shift_left(cpu, rx);
                } else if (dd == 0x1) {
                    // Shift Right
                    instr_shift_right(cpu, rx);
                } else {
                    uart_puts(UART_ID, "Undefined shift operation.\n\r");
                    *end_flag = true;
                }
            }
            break;
        case 0x6:
            // 0110 ddxx: Compare or Output
            {
                uint8_t ddxx = opcode & 0x0F;
                uint8_t dd = (ddxx & 0xC) >> 2;
                uint8_t rx = ddxx & 0x3;
                if (dd == 0x0) {
                    // Compare (rx == 0)
                    instr_compare(cpu, rx);
                } else if (dd == 0x1) {
                    // Output
                    instr_output(cpu, rx);
                } else {
                    uart_puts(UART_ID, "Undefined operation in 0110 ddxx.\n\r");
                    *end_flag = true;
                }
            }
            break;
        case 0x7:
            // 0111 ddxx: Input
            {
                uint8_t ddxx = opcode & 0x0F;
                uint8_t dd = (ddxx & 0xC) >> 2;
                uint8_t rx = ddxx & 0x3;
                instr_input(cpu, rx);
            }
            break;
        case 0xE:
            // 1110 ddxx: Conditional Branch (if Zero flag is set)
            {
                uint8_t ddxx = opcode & 0x0F;
                uint8_t dd = (ddxx & 0xC) >> 2;
                uint8_t rx = ddxx & 0x3;
                instr_cond_branch(cpu, rx, end_flag);
            }
            break;
        case 0xF:
            // 1111 ddxx: Unconditional Branch
            {
                uint8_t ddxx = opcode & 0x0F;
                uint8_t dd = (ddxx & 0xC) >> 2;
                uint8_t rx = ddxx & 0x3;
                instr_uncond_branch(cpu, rx, end_flag);
            }
            break;
        default:
            uart_puts(UART_ID, "Undefined opcode.\n\r");
            *end_flag = true;
            break;
    }
}

// Instruction Implementations

// 1. 0000 ddxx: Memory to r0 (if dd == 0)
void instr_mem_to_r0(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for Memory to r0.\n\r");
        return;
    }
    uint8_t address = cpu->regs.r0; // r0 holds the address
    if (address < 0x80 || address >= 0x100) {
        uart_puts(UART_ID, "Memory address out of bounds.\n\r");
        return;
    }
    uint8_t value = cpu->program_ram[address - 0x80];
    cpu->regs.r0 = value;
    update_zero_flag(cpu, value);
    cpu->PC += 1; // Move to next instruction (assuming 1-byte instruction)
}

// 2. 0000 ddxx: r0 to Memory (if dd == 1)
void instr_r0_to_mem(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for r0 to Memory.\n\r");
        return;
    }
    uint8_t address = cpu->regs.r0; // r0 holds the address
    if (address < 0x80 || address >= 0x100) {
        uart_puts(UART_ID, "Memory address out of bounds.\n\r");
        return;
    }
    uint8_t value = cpu->regs.r0;
    cpu->program_ram[address - 0x80] = value;
    update_zero_flag(cpu, value);
    cpu->PC += 1; // Move to next instruction
}

// 3. 0001 xxyy: Transfer between registers (rx -> ry)
void instr_transfer_reg(CPU_State *cpu, uint8_t rx, uint8_t ry) {
    if (rx >= 4 || ry >= 4) {
        uart_puts(UART_ID, "Invalid register for transfer.\n\r");
        return;
    }
    uint8_t value = get_register_value(cpu, rx);
    set_register_value(cpu, ry, value);
    update_zero_flag(cpu, value);
    cpu->PC += 1; // Move to next instruction
}

// 4. 0010 xxxx: Immediate Setting to r0
void instr_immediate_set(CPU_State *cpu, uint8_t value) {
    cpu->regs.r0 = value;
    update_zero_flag(cpu, value);
    cpu->PC += 1; // Move to next instruction
}

// 5. 0011 xxyy: Addition (rx + ry -> rx)
void instr_add(CPU_State *cpu, uint8_t rx, uint8_t ry) {
    if (rx >= 4 || ry >= 4) {
        uart_puts(UART_ID, "Invalid register for addition.\n\r");
        return;
    }
    uint8_t a = get_register_value(cpu, rx);
    uint8_t b = get_register_value(cpu, ry);
    int result = a + b;
    set_register_value(cpu, rx, result & 0xFF);
    update_zero_flag(cpu, result & 0xFF);
    // Update Overflow Flag
    if (result > 0xFF) {
        cpu->status |= STATUS_OF;
    } else {
        cpu->status &= ~STATUS_OF;
    }
    cpu->PC += 1; // Move to next instruction
}

// 6. 0100 xxyy: Subtraction (rx - ry -> rx)
void instr_sub(CPU_State *cpu, uint8_t rx, uint8_t ry) {
    if (rx >= 4 || ry >= 4) {
        uart_puts(UART_ID, "Invalid register for subtraction.\n\r");
        return;
    }
    uint8_t a = get_register_value(cpu, rx);
    uint8_t b = get_register_value(cpu, ry);
    int result = a - b;
    set_register_value(cpu, rx, result & 0xFF);
    update_zero_flag(cpu, result & 0xFF);
    // Update Overflow Flag
    if (result < 0) {
        cpu->status |= STATUS_OF;
    } else {
        cpu->status &= ~STATUS_OF;
    }
    cpu->PC += 1; // Move to next instruction
}

// 7. 0101 ddxx: Shift Left
void instr_shift_left(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for shift left.\n\r");
        return;
    }
    uint8_t value = get_register_value(cpu, rx);
    value <<= 4;
    set_register_value(cpu, rx, value);
    // No status update
    cpu->PC += 1; // Move to next instruction
}

// 8. 0101 ddxx: Shift Right
void instr_shift_right(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for shift right.\n\r");
        return;
    }
    uint8_t value = get_register_value(cpu, rx);
    value >>= 4;
    set_register_value(cpu, rx, value);
    // No status update
    cpu->PC += 1; // Move to next instruction
}

// 9. 0110 ddxx: Compare (rx == 0)
void instr_compare(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for compare.\n\r");
        return;
    }
    uint8_t value = get_register_value(cpu, rx);
    if (value == 0) {
        cpu->status |= STATUS_ZERO;
    } else {
        cpu->status &= ~STATUS_ZERO;
    }
    cpu->PC += 1; // Move to next instruction
}

// 10. 0110 ddxx: Output from rx
void instr_output(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for output.\n\r");
        return;
    }
    uint8_t value = get_register_value(cpu, rx);
    char buffer[4];
    snprintf(buffer, sizeof(buffer), "%d\n\r", value);
    uart_puts(UART_ID, buffer);
    cpu->PC += 1; // Move to next instruction
}

// 11. 0111 ddxx: Input to rx
void instr_input(CPU_State *cpu, uint8_t rx) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for input.\n\r");
        return;
    }
    uart_puts(UART_ID, "Enter a number (0-255): ");
    while (!uart_is_readable(UART_ID)) {
        tight_loop_contents(); // Wait for input
    }
    char input_buffer[4] = {0};
    int idx = 0;
    while (uart_is_readable(UART_ID) && idx < 3) {
        char c = uart_getc(UART_ID);
        if (c == '\n' || c == '\r') {
            break;
        }
        if (c >= '0' && c <= '9') {
            uart_putc(UART_ID, c); // Echo the character
            input_buffer[idx++] = c;
        }
    }
    input_buffer[idx] = '\0';
    uint8_t value = atoi(input_buffer);
    set_register_value(cpu, rx, value);
    update_zero_flag(cpu, value);
    uart_puts(UART_ID, "\n\r");
    cpu->PC += 1; // Move to next instruction
}

// 12. 1110 ddxx: Conditional Branch (if Zero flag is set)
void instr_cond_branch(CPU_State *cpu, uint8_t rx, bool *end_flag) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for conditional branch.\n\r");
        *end_flag = true;
        return;
    }
    if (cpu->status & STATUS_ZERO) {
        uint8_t address = get_register_value(cpu, rx);
        if (address < ROM_SIZE) {
            cpu->PC = address;
        } else {
            uart_puts(UART_ID, "Branch address out of bounds.\n\r");
            *end_flag = true;
        }
    } else {
        cpu->PC += 1; // Move to next instruction
    }
}

// 13. 1111 ddxx: Unconditional Branch
void instr_uncond_branch(CPU_State *cpu, uint8_t rx, bool *end_flag) {
    if (rx >= 4) {
        uart_puts(UART_ID, "Invalid register for unconditional branch.\n\r");
        *end_flag = true;
        return;
    }
    uint8_t address = get_register_value(cpu, rx);
    if (address < ROM_SIZE) {
        cpu->PC = address;
    } else {
        uart_puts(UART_ID, "Branch address out of bounds.\n\r");
        *end_flag = true;
    }
}

// Utility Functions

// Get Register Value
uint8_t get_register_value(CPU_State *cpu, uint8_t reg) {
    switch (reg) {
        case 0: return cpu->regs.r0;
        case 1: return cpu->regs.r1;
        case 2: return cpu->regs.r2;
        case 3: return cpu->regs.r3;
        default: return 0;
    }
}

// Set Register Value
void set_register_value(CPU_State *cpu, uint8_t reg, uint8_t value) {
    switch (reg) {
        case 0: cpu->regs.r0 = value; break;
        case 1: cpu->regs.r1 = value; break;
        case 2: cpu->regs.r2 = value; break;
        case 3: cpu->regs.r3 = value; break;
        default: break;
    }
}

// Update Zero Flag
void update_zero_flag(CPU_State *cpu, uint8_t result) {
    if (result == 0) {
        cpu->status |= STATUS_ZERO;
    } else {
        cpu->status &= ~STATUS_ZERO;
    }
}

// Update Overflow Flag
void update_overflow_flag(CPU_State *cpu, int result) {
    if (result > 255 || result < 0) {
        cpu->status |= STATUS_OF;
    } else {
        cpu->status &= ~STATUS_OF;
    }
}
